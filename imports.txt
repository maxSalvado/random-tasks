# app/main.py
import os, hmac
from fastapi import FastAPI, Request
from starlette.responses import JSONResponse

app = FastAPI()

EDGE_SHARED_SECRET = os.environ.get("EDGE_SHARED_SECRET", "")
ALLOW_PATHS = {"/health", "/livez", "/readyz"}  # allow ALB TG health checks etc.

@app.middleware("http")
async def require_edge_secret(request: Request, call_next):
    # Allow health (ALB checks won't have the secret)
    if request.url.path in ALLOW_PATHS:
        return await call_next(request)

    expected = EDGE_SHARED_SECRET
    got = request.headers.get("x-edge-secret", "")

    # Deny if secret is missing or doesn't match (constant-time compare)
    if not expected or not hmac.compare_digest(got, expected):
        return JSONResponse({"detail": "Forbidden"}, status_code=403)

    return await call_next(request)

# Example health route (unprotected)
@app.get("/health")
def health():
    return {"ok": True}


TO TEST:
SECRET='<your-edge-secret-here>'
curl -i -X POST http://localhost:8000/api/query \
  -H 'Content-Type: application/json' \
  -H "X-Edge-Secret: $SECRET" \
  --data-raw '{"user_input":"hello from curl"}'
